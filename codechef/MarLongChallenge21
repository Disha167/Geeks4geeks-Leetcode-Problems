//a*a=a^2 and (a-b)(a+b)=a^2-b^2 i.e. as the difference between the nos. increases b^2 gets subtracted from a^2 i.e. the product becomes smaller so we try to minimize the diff.
//between the two numbers A and B keeping in mind that their xor should be C , for that if we find an index in C where there is 0, then we put 1 in A and B there so as to
//greedily obtain the maximum number and when there is 1 in index C, then we have to put 1 in one number and 0 in another(according to property of xor) and for obtaining 
//maximum product, we have to make the difference minimum so we make the most significant bit of one let's suppose A 1 and rest make all the bits accept the most significant 
//bit of B 1 to compensate for the difference . Eg. let's suppose we have 13 that makes 1101 so first of all we make the 3rd bit of both A and B 1 so as to give xor 0
//and then we make 1st bit i.e. most significant bit of A 1 making A 1010 i.e 10 and then rest all bits of B 1 making B 0111 i.e. 7 making the product maximum i.e 10*7=70
#include <bits/stdc++.h>
using namespace std;
#define endl '\n'
#define ll long long

void tests() {

    ll C;
    cin>>C;
    ll Max_Sig_Bit=0;
    bitset<32> arr(C);
    for(ll i=31;i>0;i--)
    {
        if(arr[i]==1)
        {
            Max_Sig_Bit=i;
            break;
        }
    }
   // cout<<Max_Sig_Bit<<endl;
    ll A[Max_Sig_Bit+1]={0},B[Max_Sig_Bit+1]={0};
    A[0]=1;
    B[0]=0;
    for(ll i=Max_Sig_Bit-1;i>=0;i--)
    {
        if(arr[i]==0)
        {
            A[Max_Sig_Bit-i]=1;//we have to use Max_Sig_Bit-i as the conversion with that function is in opposite direction
            B[Max_Sig_Bit-i]=1;
        }
        else
        {
        B[Max_Sig_Bit-i]=1;
        A[Max_Sig_Bit-i]=0;
        }
    }
    ll a_val=0,b_val=0;
    for(ll i=0;i<=Max_Sig_Bit;i++)
    {
        ll x=(A[Max_Sig_Bit-i]*pow(2,i));//everywhere we have to use Max_Sig_Bit-i instead of i as when we convert using stl function bitset it is converted in opposite direction
        //instead of 1101 for 13 it stores 1011 in arr 
       // cout<<x<<endl;
        a_val+=x;
        ll y=(B[Max_Sig_Bit-i]*pow(2,i));
        //cout<<y<<endl;
        b_val+=y;
    }
    cout<<a_val*b_val<<endl;
    

}
int32_t main( int argc , char ** argv )
{
	ios_base::sync_with_stdio(false) ; 
	cin.tie(NULL) ; 
	int t = 1;
	cin>>t;
	while(t--){
		tests();
	}
    return 0 ; 
}
